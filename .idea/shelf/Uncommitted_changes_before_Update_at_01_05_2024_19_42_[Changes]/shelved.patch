Index: app/src/main/java/com/example/oioj/ELEAWriteDetailsPieces.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.oioj\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.LinearLayout\r\nimport android.widget.RadioButton\r\nimport android.widget.RadioGroup\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass ELEAWriteDetailsPieces : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.wele_write_etat_lieux_piece)\r\n        //Recover le piece_id qui nous permettra d'afficher les equipements\r\n        val idPiece = intent.getIntExtra(\"piece_id\",-1)\r\n        println(idPiece);\r\n        //Bouton Back, redirection page precedente\r\n        val btnBackMesReservations = findViewById<Button>(R.id.btnBackMesLogements)\r\n        btnBackMesReservations.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        //Bouton afin de valider l'état des lieux de la pièce.\r\n        val buttonValidate = findViewById<Button>(R.id.buttonValidateWriteEtatLieuxEntree)\r\n\r\n        GlobalScope.launch(Dispatchers.IO){\r\n            retrieveEquipement(idPiece)\r\n        }\r\n    }\r\n\r\n    private suspend fun retrieveEquipement(idPiece: Int){\r\n        try{\r\n            val token = gestionToken.getToken()\r\n            val url = URL(\"http://api.immomvc.varin.ovh/?action=recoverEquipementPiece\")\r\n            val httpURLConnection = url.openConnection() as HttpURLConnection\r\n            httpURLConnection.requestMethod = \"POST\"\r\n            httpURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n            val jsonObject = JSONObject().apply {\r\n                put(\"token\", token)\r\n                put(\"idPiece\", idPiece)\r\n            }\r\n\r\n            val outputStream = httpURLConnection.outputStream\r\n            outputStream.write(jsonObject.toString().toByteArray())\r\n            outputStream.close()\r\n            val responseCode = httpURLConnection.responseCode\r\n            println(\"Response Code: $responseCode\")\r\n\r\n            if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                val inputStream = httpURLConnection.inputStream\r\n                val response = inputStream.bufferedReader().use { it.readText() }\r\n                val jsonArray = JSONArray(response)\r\n                val jsonArrayLength = jsonArray.length()\r\n                println(\"Longueur du tableau JSON : $jsonArrayLength\")\r\n                println(\" la reponse elea write$response\")\r\n\r\n                val containerEquipements = findViewById<LinearLayout>(R.id.equipementContainer)\r\n                for (i in 0 until jsonArray.length()) {\r\n                    val equipement = jsonArray.getJSONObject(i)\r\n                    val id = equipement.getInt(\"id\")\r\n                    val libelle = equipement.getString(\"libelle\")\r\n                    println(\"Equipement $i :\")\r\n                    println(\"   ID : $id\")\r\n                    println(\"   Libellé : $libelle\")\r\n\r\n                    runOnUiThread{\r\n                        val equipementLayout = LayoutInflater.from(this@ELEAWriteDetailsPieces).inflate(R.layout.wele_card_equipement, containerEquipements, false)\r\n                        val txtTitleEquipement = equipementLayout.findViewById<TextView>(R.id.titleEtatEquipement)\r\n                        txtTitleEquipement.text = \"$libelle\"\r\n\r\n                        val buttonGroup = equipementLayout.findViewById<RadioGroup>(R.id.buttonGroup)\r\n                        val buttonMauvais = equipementLayout.findViewById<RadioButton>(R.id.weleCEbadButton)\r\n                        val buttonMoyen = equipementLayout.findViewById<RadioButton>(R.id.weleCEmoyenButton)\r\n                        val buttonBon = equipementLayout.findViewById<RadioButton>(R.id.weleCEbonButton)\r\n                        var noteValue = 0\r\n\r\n                        buttonGroup.setOnCheckedChangeListener { group, checkedId ->\r\n                            noteValue = when(checkedId){\r\n                                R.id.weleCEbadButton -> 3\r\n                                R.id.weleCEmoyenButton -> 2\r\n                                R.id.weleCEbonButton -> 1\r\n                                else -> 0\r\n                            }\r\n                            println(\"note saisie : $noteValue\")\r\n                        }\r\n\r\n                        buttonMauvais.id = View.generateViewId()\r\n                        buttonMoyen.id = View.generateViewId()\r\n                        buttonBon.id = View.generateViewId()\r\n\r\n\r\n                        containerEquipements.addView(equipementLayout)\r\n                    }\r\n                }\r\n            } else  {\r\n                val errorStream = httpURLConnection.errorStream\r\n                val errorResponse = errorStream.bufferedReader().use { it.readText() }\r\n                println(\"Erreur lors de la requête : $errorResponse\")\r\n                println(\"Code de réponse : $responseCode\")\r\n\r\n            }\r\n        }catch (e: Exception) {\r\n            println(\"Erreur lors de l'insertion de l'état des lieux (partie pièce equipement):\")\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/oioj/ELEAWriteDetailsPieces.kt b/app/src/main/java/com/example/oioj/ELEAWriteDetailsPieces.kt
--- a/app/src/main/java/com/example/oioj/ELEAWriteDetailsPieces.kt	(revision a690e18922fa63eeb0737e6ccc129d6a0371e3fd)
+++ b/app/src/main/java/com/example/oioj/ELEAWriteDetailsPieces.kt	(date 1714585075501)
@@ -18,13 +18,12 @@
 import java.net.URL
 
 class ELEAWriteDetailsPieces : AppCompatActivity() {
+    val notesEquipements = HashMap<Int, Int>()
 
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.wele_write_etat_lieux_piece)
-        //Recover le piece_id qui nous permettra d'afficher les equipements
-        val idPiece = intent.getIntExtra("piece_id",-1)
-        println(idPiece);
+
         //Bouton Back, redirection page precedente
         val btnBackMesReservations = findViewById<Button>(R.id.btnBackMesLogements)
         btnBackMesReservations.setOnClickListener {
@@ -34,13 +33,22 @@
         //Bouton afin de valider l'état des lieux de la pièce.
         val buttonValidate = findViewById<Button>(R.id.buttonValidateWriteEtatLieuxEntree)
 
+        //Recover le piece_id qui nous permettra d'afficher les equipements + inserer
+        val idReservation = intent.getIntExtra("idReservation", -1)
+        val idPiece = intent.getIntExtra("piece_id",-1)
         GlobalScope.launch(Dispatchers.IO){
             retrieveEquipement(idPiece)
         }
+        buttonValidate.setOnClickListener {
+            GlobalScope.launch(Dispatchers.IO) {
+                insertEDLDetailsEquipement(idReservation, idPiece)
+            }
+        }
+
     }
 
-    private suspend fun retrieveEquipement(idPiece: Int){
-        try{
+    private suspend fun retrieveEquipement(idPiece: Int) {
+        try {
             val token = gestionToken.getToken()
             val url = URL("http://api.immomvc.varin.ovh/?action=recoverEquipementPiece")
             val httpURLConnection = url.openConnection() as HttpURLConnection
@@ -67,7 +75,7 @@
                 println(" la reponse elea write$response")
 
                 val containerEquipements = findViewById<LinearLayout>(R.id.equipementContainer)
-                for (i in 0 until jsonArray.length()) {
+                for (i in 0 until jsonArrayLength) {
                     val equipement = jsonArray.getJSONObject(i)
                     val id = equipement.getInt("id")
                     val libelle = equipement.getString("libelle")
@@ -75,49 +83,90 @@
                     println("   ID : $id")
                     println("   Libellé : $libelle")
 
-                    runOnUiThread{
+                    runOnUiThread {
                         val equipementLayout = LayoutInflater.from(this@ELEAWriteDetailsPieces).inflate(R.layout.wele_card_equipement, containerEquipements, false)
                         val txtTitleEquipement = equipementLayout.findViewById<TextView>(R.id.titleEtatEquipement)
-                        txtTitleEquipement.text = "$libelle"
+                        txtTitleEquipement.text = libelle
 
                         val buttonGroup = equipementLayout.findViewById<RadioGroup>(R.id.buttonGroup)
                         val buttonMauvais = equipementLayout.findViewById<RadioButton>(R.id.weleCEbadButton)
                         val buttonMoyen = equipementLayout.findViewById<RadioButton>(R.id.weleCEmoyenButton)
                         val buttonBon = equipementLayout.findViewById<RadioButton>(R.id.weleCEbonButton)
-                        var noteValue = 0
+
+                        buttonGroup.tag = id
 
-                        buttonGroup.setOnCheckedChangeListener { group, checkedId ->
-                            noteValue = when(checkedId){
-                                R.id.weleCEbadButton -> 3
-                                R.id.weleCEmoyenButton -> 2
-                                R.id.weleCEbonButton -> 1
-                                else -> 0
-                            }
-                            println("note saisie : $noteValue")
-                        }
+                        buttonMauvais.tag = 3
+                        buttonMoyen.tag = 2
+                        buttonBon.tag = 1
+
+                        buttonGroup.removeView(buttonMauvais)
+                        buttonGroup.removeView(buttonMoyen)
+                        buttonGroup.removeView(buttonBon)
 
                         buttonMauvais.id = View.generateViewId()
                         buttonMoyen.id = View.generateViewId()
                         buttonBon.id = View.generateViewId()
 
+                        buttonGroup.addView(buttonMauvais)
+                        buttonGroup.addView(buttonMoyen)
+                        buttonGroup.addView(buttonBon)
 
+
+                        buttonGroup.setOnCheckedChangeListener { group, checkedId ->
+                            val selectedButton = findViewById<RadioButton>(checkedId)
+                            val noteValue = selectedButton.tag as Int
+                            val equipmentId = group.tag as Int
+                            println("User clicked on button for equipment $equipmentId with note $noteValue")
+                            notesEquipements[equipmentId] = noteValue
+                        }
                         containerEquipements.addView(equipementLayout)
                     }
                 }
-            } else  {
+            } else {
                 val errorStream = httpURLConnection.errorStream
                 val errorResponse = errorStream.bufferedReader().use { it.readText() }
                 println("Erreur lors de la requête : $errorResponse")
                 println("Code de réponse : $responseCode")
+            }
+        } catch (e: Exception) {
+            println("Erreur lors de la récupération (partie pièce equipement):")
+            e.printStackTrace()
+        }
+    }
+
+    private suspend fun insertEDLDetailsEquipement(idReservation: Int, idPiece: Int) {
+        for ((idEquipement, note) in notesEquipements) {
+            try {
+                val token = gestionToken.getToken()
+                val url =
+                    URL("http://api.immomvc.varin.ovh/?action=writeEDLEquipementPieceEquipement")
+                val httpURLConnection = url.openConnection() as HttpURLConnection
+                httpURLConnection.requestMethod = "POST"
+                httpURLConnection.setRequestProperty("Content-Type", "application/json")
 
-            }
-        }catch (e: Exception) {
-            println("Erreur lors de l'insertion de l'état des lieux (partie pièce equipement):")
-            e.printStackTrace()
+                val jsonObject = JSONObject().apply {
+                    put("token", token)
+                    put("idPiece", idPiece)
+                    put("idReservation", idReservation)
+                    put("idEquipement", idEquipement)
+                    put("note", note)
+                }
+                val outputStream = httpURLConnection.outputStream
+                println(jsonObject)
+                outputStream.write(jsonObject.toString().toByteArray())
+                outputStream.close()
+
+                val responseCode = httpURLConnection.responseCode
+                println("Response Code: $responseCode")
+
+            } catch (e: Exception) {
+                println("Erreur lors de l'insertion de l'état des lieux (partie pièce equipement):")
+                e.printStackTrace()
+            }
         }
     }
+}
 
 
 
 
-}
\ No newline at end of file
Index: app/src/main/java/com/example/oioj/ELEAWrite.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.oioj\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.LinearLayout\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.net.HttpURLConnection\r\nimport java.net.URL\r\n\r\nclass ELEAWrite : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.wele_write_etat_lieux_entree)\r\n\r\n        val btnBackMesReservations = findViewById<Button>(R.id.btnBackMesLogementsEntree);\r\n        btnBackMesReservations.setOnClickListener {\r\n            onBackPressed()\r\n        }\r\n\r\n        // Ici on récupère le logement ID qu'on a envoyer sur la page ETAT LIEUX ENTREE ACTIVITY\r\n        val idReservation = intent.getIntExtra(\"reservation_id\",-1)\r\n        val idBien = intent.getIntExtra(\"bien_id\", -1)\r\n\r\n        GlobalScope.launch(Dispatchers.Main){\r\n            retrievePieces(idBien,idReservation);\r\n        }\r\n\r\n        val buttonValidate = findViewById<Button>(R.id.buttonValidateWriteEtatLieuxEntree)\r\n        buttonValidate.setOnClickListener {\r\n            val editTextWriteEtatLieuxEntree =\r\n                findViewById<EditText>(R.id.editTextWriteEtatLieuxEntree)\r\n            val userText = editTextWriteEtatLieuxEntree.text.toString()\r\n            println(\"Texte saisi par l'utilisateur : $userText\")\r\n            GlobalScope.launch(Dispatchers.IO) {\r\n                insertEDLGlobalDuLogement(idReservation, userText)\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private suspend fun insertEDLGlobalDuLogement(idReservation: Int, userText: String){\r\n        return withContext(Dispatchers.IO){\r\n            try{\r\n                val token = gestionToken.getToken()\r\n                val url = URL(\"http://api.immomvc.varin.ovh/?action=InsertEDLentree\") //////////////////////////// Mettre une action ZEBI sinon sa marchera pas connasse\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n                val jsonObject = JSONObject().apply {\r\n                    put(\"token\", token)\r\n                    put(\"idReservation\", idReservation)\r\n                    put(\"commentaire\", userText)\r\n                }\r\n                println(jsonObject)\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(jsonObject.toString().toByteArray())\r\n                outputStream.close()\r\n                val responseCode = httpURLConnection.responseCode\r\n                println(\"Response Code: $responseCode\")\r\n            }catch (e: Exception) {\r\n                println(\"Erreur lors de l'insertion de l'état des lieux:  ${e.message}\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun retrievePieces(idBien: Int, idReservation: Int){\r\n        return withContext(Dispatchers.IO){\r\n            try{\r\n\r\n                val token = gestionToken.getToken()\r\n                val url = URL(\"http://api.immomvc.varin.ovh/?action=piece\")\r\n                val httpURLConnection = url.openConnection() as HttpURLConnection\r\n                httpURLConnection.requestMethod = \"POST\"\r\n                httpURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n                val jsonObject = JSONObject().apply {\r\n                    put(\"token\", token)\r\n                    put(\"idBien\", idBien)\r\n                }\r\n                println(\"logement id = $idBien\")\r\n                val outputStream = httpURLConnection.outputStream\r\n                outputStream.write(jsonObject.toString().toByteArray())\r\n                outputStream.close()\r\n                val responseCode = httpURLConnection.responseCode\r\n                println(\"Response Code: $responseCode\")\r\n\r\n                if (responseCode == HttpURLConnection.HTTP_OK) {\r\n                    val inputStream = httpURLConnection.inputStream\r\n                    val response = inputStream.bufferedReader().use { it.readText() }\r\n                    val jsonArray = JSONArray(response)\r\n                    val jsonArrayLength = jsonArray.length()\r\n                    println(\"Longueur du tableau JSON : $jsonArrayLength\")\r\n                    println(\" la reponse elea write$response\")\r\n\r\n                    val containerPieces = findViewById<LinearLayout>(R.id.roomContainer)\r\n                    for (i in 0 until jsonArray.length()) {\r\n                        val piece = jsonArray.getJSONObject(i)\r\n                        val id = piece.getInt(\"id\")\r\n                        val surface = piece.getDouble(\"surface\")\r\n                        val libelle = piece.getString(\"libelle\")\r\n                        val id_bien = piece.getInt(\"id_bien\")\r\n                        val i = i + 1\r\n                        println(\"Pièce $i :\")\r\n                        println(\"   ID : $id\")\r\n                        println(\"   Surface : $surface\")\r\n                        println(\"   Libellé : $libelle\")\r\n                        println(\"   ID du bien : $id_bien\")\r\n\r\n                        runOnUiThread{\r\n                            val pieceLayout = LayoutInflater.from(this@ELEAWrite).inflate(R.layout.wele_card_listepiece, containerPieces, false)\r\n                            val txtNomPiece = pieceLayout.findViewById<TextView>(R.id.txtNomPieceWele)\r\n                            val surfacePiece = pieceLayout.findViewById<TextView>(R.id.surfacePieceWele)\r\n                            txtNomPiece.text = libelle\r\n                            surfacePiece.text = surface.toString()+\"m²\"\r\n                            containerPieces.addView(pieceLayout)\r\n\r\n                            val buttonPiece = findViewById<Button>(R.id.selectPieceWele)\r\n                            val buttonId = \"selectPieceWele_$id\"\r\n                            buttonPiece.id = View.generateViewId()\r\n                            buttonPiece.tag = id\r\n\r\n                            buttonPiece.setOnClickListener {\r\n                                val pieceId = it.tag as Int\r\n                                val intent = Intent(this@ELEAWrite, ELEAWriteDetailsPieces::class.java)\r\n                                intent.putExtra(\"piece_id\", pieceId)\r\n                                intent.putExtra(\"idReservation\", idReservation)\r\n                                startActivity(intent)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    val inputStream = httpURLConnection.inputStream\r\n                    val response = inputStream.bufferedReader().use { it.readText() }\r\n                    val contentReponse = JSONObject(response)\r\n                    println(contentReponse)\r\n                }\r\n            } catch (e: Exception) {\r\n                println(\"Erreur lors de la récupération des biens: ${e.message}\")\r\n            }\r\n        }\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/oioj/ELEAWrite.kt b/app/src/main/java/com/example/oioj/ELEAWrite.kt
--- a/app/src/main/java/com/example/oioj/ELEAWrite.kt	(revision a690e18922fa63eeb0737e6ccc129d6a0371e3fd)
+++ b/app/src/main/java/com/example/oioj/ELEAWrite.kt	(date 1714575046044)
@@ -136,6 +136,7 @@
                                 val intent = Intent(this@ELEAWrite, ELEAWriteDetailsPieces::class.java)
                                 intent.putExtra("piece_id", pieceId)
                                 intent.putExtra("idReservation", idReservation)
+                                intent.putExtra("idBien", idBien)
                                 startActivity(intent)
                             }
                         }
